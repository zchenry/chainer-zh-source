运行即定义
----------

.. currentmodule:: chainer

就像在首页提及到的，Chainer 是一个灵活的神经网络框架。
其一大目标就是灵活性，所以它必须能使我们简单直观地写出复杂的网络结构。

大部分现存的深度学习框架都是基于 **"定义并运行"** 模式。
也就是说，开始时一个网络被定义并固定下来，然后用户周期性地提供小批量训练数据。
既然网络在任何前反馈或后反馈计算前被静态定义下来，所有的逻辑必须以*数据*的形式嵌入网络结构。
所以，在这样的框架下定义网络结构 (比如 Caffe) 遵循陈述式方法。
注意你仍然可以用命令式语言定义一个这样的静态网络 (比如 torch.nn, 基于 Theano 的框架，和 TensorFlow)。

相对于此, Chainer 采用 **"运行即定义"** 模式，比如说，网络是用实际的前反馈计算动态定义的。
更准确地说，Chainer 保存计算的履历而不是编程逻辑。
这种模式使我们能够完全利用 Python 的编程逻辑的威力。
比如说，Chainer 不需要任何“魔法”去定义网络结构中的条件和循环。
运行即定义模式是 Chainer 的核心概念。
我们会在这篇教程中展示如何动态定义网络。

这种模式亦使复数 GPU 并列计算变得简单，因为逻辑更接近网络操作。
我们会在这篇教程之后的章节中审视这些功能。
